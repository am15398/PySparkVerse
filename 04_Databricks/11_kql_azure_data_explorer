{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "application/vnd.databricks.v1+cell": {
     "cellMetadata": {},
     "inputWidgets": {},
     "nuid": "9e1be520-754d-45c3-b9db-412feb8eab34",
     "showTitle": false,
     "tableResultSettingsMap": {},
     "title": ""
    }
   },
   "source": [
    "# ðŸ“Œ **What is KQL?**\n",
    "\n",
    "**KQL** stands for **Kusto Query Language**.\n",
    "Itâ€™s a powerful query language used to query **Azure Data Explorer** and **Microsoft tools** like:\n",
    "\n",
    "* **Azure Monitor Logs**\n",
    "* **Log Analytics**\n",
    "* **Application Insights**\n",
    "* **Microsoft Sentinel**\n",
    "\n",
    "Itâ€™s designed for **fast, scalable analysis of large volumes of data**.\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Where is KQL Used?**\n",
    "\n",
    "* **Azure Monitor** (for metrics & logs)\n",
    "* **Azure Sentinel** (security analytics)\n",
    "* **Microsoft Defender**\n",
    "* **Application Insights**\n",
    "* **Azure Data Explorer**\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Why Learn KQL?**\n",
    "\n",
    "* Super fast queries on large datasets\n",
    "* Easy for troubleshooting, monitoring, and analytics\n",
    "* Similar to SQL but more focused on **time-series** & **telemetry data**\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Basic Structure of KQL Query:**\n",
    "\n",
    "KQL queries are written in **pipe-separated steps**:\n",
    "\n",
    "```kql\n",
    "TableName\n",
    "| operation1\n",
    "| operation2\n",
    "| operation3\n",
    "```\n",
    "\n",
    "It starts with a **table**, then you apply **filters**, **transformations**, and **aggregations**.\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Basic KQL Query Example:**\n",
    "\n",
    "```kql\n",
    "Heartbeat\n",
    "| where TimeGenerated > ago(1h)\n",
    "| summarize Count = count() by Computer\n",
    "| order by Count desc\n",
    "```\n",
    "\n",
    "**Explanation:**\n",
    "\n",
    "* Reads data from `Heartbeat` table\n",
    "* Filters last 1 hour of data\n",
    "* Counts records per computer\n",
    "* Sorts by count (descending)\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Common Operators:**\n",
    "\n",
    "| Operator         | Purpose                          |\n",
    "| ---------------- | -------------------------------- |\n",
    "| `where`          | Filter rows (like SQL `WHERE`)   |\n",
    "| `project`        | Select columns (like `SELECT`)   |\n",
    "| `summarize`      | Aggregate data (like `GROUP BY`) |\n",
    "| `extend`         | Add calculated columns           |\n",
    "| `join`           | Combine tables                   |\n",
    "| `order by`       | Sort data                        |\n",
    "| `limit` / `take` | Limit results                    |\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Key KQL Functions:**\n",
    "\n",
    "| Function                | Purpose                                                  |\n",
    "| ----------------------- | -------------------------------------------------------- |\n",
    "| `ago()`                 | Calculates relative time (e.g., `ago(1h)`)               |\n",
    "| `datetime()`            | Specify fixed time                                       |\n",
    "| `count()`               | Count number of records                                  |\n",
    "| `bin()`                 | Round timestamps into intervals (useful for time-series) |\n",
    "| `tostring()`, `toint()` | Type conversions                                         |\n",
    "| `parse_json()`          | Parse JSON data                                          |\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Example Queries:**\n",
    "\n",
    "### âœ… Query Logs from Last 24 Hours:\n",
    "\n",
    "```kql\n",
    "Syslog\n",
    "| where TimeGenerated > ago(24h)\n",
    "```\n",
    "\n",
    "### âœ… Select Specific Columns:\n",
    "\n",
    "```kql\n",
    "Syslog\n",
    "| project TimeGenerated, Computer, ProcessName\n",
    "```\n",
    "\n",
    "### âœ… Filter by Text (Like SQL `LIKE`):\n",
    "\n",
    "```kql\n",
    "Syslog\n",
    "| where ProcessName contains \"nginx\"\n",
    "```\n",
    "\n",
    "### âœ… Group By & Aggregate:\n",
    "\n",
    "```kql\n",
    "Syslog\n",
    "| summarize Count = count() by Computer\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Time Filtering (Very Common in KQL):**\n",
    "\n",
    "```kql\n",
    "| where TimeGenerated between (datetime(2024-07-01) .. datetime(2024-07-06))\n",
    "```\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Sample Query with Multiple Steps:**\n",
    "\n",
    "```kql\n",
    "Perf\n",
    "| where CounterName == \"% Processor Time\"\n",
    "| summarize AvgCPU=avg(CounterValue) by bin(TimeGenerated, 1h), Computer\n",
    "| order by TimeGenerated desc\n",
    "```\n",
    "\n",
    "* Filters CPU metrics\n",
    "* Averages by 1-hour time bins\n",
    "* Sorted by time\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Key Differences: KQL vs SQL**\n",
    "\n",
    "| Feature        | KQL                                   | SQL                |              |\n",
    "| -------------- | ------------------------------------- | ------------------ | ------------ |\n",
    "| Data Source    | Logs, telemetry                       | Relational DB      |              |\n",
    "| Query Focus    | Time-series, logs                     | Relational data    |              |\n",
    "| Joins          | Supported (slightly different syntax) | Full joins support |              |\n",
    "| Time Functions | Very rich                             | Limited            |              |\n",
    "| Syntax Style   | Pipe (\\`                              | \\`) chaining       | Clause-based |\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Advanced Features (Later Learning):**\n",
    "\n",
    "* **Joins** between tables\n",
    "* **Render** (for charts inside dashboards)\n",
    "* **Machine Learning** Plugins (for anomalies)\n",
    "* **Regex** support via `matches regex`\n",
    "* **Materialized Views** (for performance)\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Learning Tips for Beginners:**\n",
    "\n",
    "1. Start with `where`, `project`, `summarize`.\n",
    "2. Always use `TimeGenerated` filtering to avoid huge result sets.\n",
    "3. Learn `bin()` for grouping by time.\n",
    "4. Practice in **Azure Monitor Logs** or **Log Analytics**.\n",
    "5. Explore built-in sample queries in Azure.\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **Useful Resources to Learn More:**\n",
    "\n",
    "* [Microsoft Learn: KQL Basics](https://learn.microsoft.com/en-us/azure/data-explorer/kusto/query/)\n",
    "* [KQL Quick Reference](https://docs.microsoft.com/en-us/azure/data-explorer/kql-quick-reference)\n",
    "* Azure Portal â†’ Monitor â†’ Logs â†’ Try Sample Queries\n",
    "\n",
    "---\n",
    "\n",
    "# ðŸ“Œ **KQL Cheat Sheet (Quick Reference)**\n",
    "\n",
    "```kql\n",
    "TableName\n",
    "| where Column == \"value\"\n",
    "| project Column1, Column2\n",
    "| summarize count() by Column3\n",
    "| order by Column1 desc\n",
    "| take 10\n",
    "```\n",
    "\n",
    "---\n"
   ]
  }
 ],
 "metadata": {
  "application/vnd.databricks.v1+notebook": {
   "computePreferences": null,
   "dashboards": [],
   "environmentMetadata": {
    "base_environment": "",
    "environment_version": "1"
   },
   "inputWidgetPreferences": null,
   "language": "python",
   "notebookMetadata": {
    "pythonIndentUnit": 4
   },
   "notebookName": "11_kql",
   "widgets": {}
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
